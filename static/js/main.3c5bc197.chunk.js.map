{"version":3,"sources":["ciphers/Base64.ts","utils/idGenerator.ts","ciphers/Clear.ts","ciphers/Shift.ts","ciphers/index.ts","components/molecules/cipherbox/CipherSelect.tsx","icons/close.svg","icons/done.svg","icons/settings.svg","components/molecules/cipherbox/index.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Base64","name","text","Buffer","from","toString","Clear","idGenerator","startId","id","generator","this","next","value","letterIndex","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","alphabet","createShift","size","modularValue","length","Shift","settings","shift","split","map","join","cipherTypes","cipherByName","clear","base64","CipherSelect","onChange","handleChange","useCallback","event","target","className","getInput","key","type","Number","CipherBox","cipher","onTextChange","index","onClose","onTypeChange","onSettingChange","useState","isEditMode","setEditMode","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","onClick","src","done","alt","close","Object","entries","initialCiphers","initialValues","App","ciphers","setCiphers","values","setValues","updateValues","newValues","decode","encode","onDragEnd","result","destination","source","newCiphers","to","splice","removed","moveCipher","droppableId","direction","droppableProps","newCipher","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3c5bc197.chunk.js","sourcesContent":["import { Clear } from \"./Clear\";\r\n\r\nexport class Base64 extends Clear {\r\n  name = \"base64\";\r\n\r\n  encode(text: string): string {\r\n    return Buffer.from(text).toString(\"base64\");\r\n  }\r\n\r\n  decode(text: string): string {\r\n    return Buffer.from(text, \"base64\").toString();\r\n  }\r\n}\r\n","function* idGenerator(startId: number) {\r\n  let id = startId;\r\n  while (true) yield id++;\r\n}\r\n\r\n// generator will never reach return\r\n// therefore, return type number is okay to use here\r\nconst generator = idGenerator(0) as unknown as Generator<number, number>;\r\n\r\nexport const generateId = () => generator.next().value;\r\n","import { generateId } from \"../utils/idGenerator\";\r\nimport { ICipher } from \"./ICipher\";\r\n\r\nexport class Clear implements ICipher {\r\n  name = \"clear\";\r\n  id: number;\r\n\r\n  constructor() {\r\n    this.id = generateId();\r\n  }\r\n\r\n  encode(text: string): string {\r\n    return text;\r\n  }\r\n\r\n  decode(text: string): string {\r\n    return text;\r\n  }\r\n}\r\n","import { Clear } from \"./Clear\";\r\n\r\nconst letterIndex: Record<typeof alphabet[number], number> = {\r\n  a: 0,\r\n  b: 1,\r\n  c: 2,\r\n  d: 3,\r\n  e: 4,\r\n  f: 5,\r\n  g: 6,\r\n  h: 7,\r\n  i: 8,\r\n  j: 9,\r\n  k: 10,\r\n  l: 11,\r\n  m: 12,\r\n  n: 13,\r\n  o: 14,\r\n  p: 15,\r\n  q: 16,\r\n  r: 17,\r\n  s: 18,\r\n  t: 19,\r\n  u: 20,\r\n  v: 21,\r\n  w: 22,\r\n  x: 23,\r\n  y: 24,\r\n  z: 25,\r\n};\r\n\r\nconst alphabet = [\r\n  \"a\",\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"e\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"i\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"o\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"u\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n] as const;\r\n\r\nconst modularValue = (value: number, size: number) => (value + size) % size;\r\nconst createShift = (value: number) => (c: string) =>\r\n  c in letterIndex\r\n    ? alphabet[\r\n        modularValue(\r\n          letterIndex[c as typeof alphabet[number]] + value,\r\n          alphabet.length\r\n        )\r\n      ]\r\n    : c;\r\n\r\nexport class Shift extends Clear {\r\n  name = \"shift\";\r\n  settings = { value: 1 };\r\n\r\n  encode(text: string): string {\r\n    const shift = createShift(this.settings.value);\r\n    return text.split(\"\").map(shift).join(\"\");\r\n  }\r\n\r\n  decode(text: string): string {\r\n    const shift = createShift(this.settings.value * -1);\r\n    return text.split(\"\").map(shift).join(\"\");\r\n  }\r\n}\r\n","import { Base64 } from \"./Base64\";\r\nimport { Clear } from \"./Clear\";\r\nimport { Shift } from \"./Shift\";\r\n\r\nexport type Cipher = Clear | Base64 | Shift;\r\nexport const cipherTypes = [\"clear\", \"base64\", \"shift\"] as const;\r\nexport type CipherName = typeof cipherTypes[number];\r\nexport const cipherByName = {\r\n  clear: () => new Clear(),\r\n  base64: () => new Base64(),\r\n  shift: () => new Shift(),\r\n} as const;\r\n","import React, { ChangeEventHandler, useCallback } from \"react\";\r\nimport { cipherTypes } from \"../../../ciphers\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nexport default function CipherSelect({ value, onChange }: Props) {\r\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = useCallback(\r\n    (event) => onChange(event.target.value),\r\n    [onChange]\r\n  );\r\n\r\n  return (\r\n    <select className=\"cipherbox-select\" value={value} onChange={handleChange}>\r\n      {cipherTypes.map((c) => (\r\n        <option key={c} value={c}>\r\n          {c}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/close.4200050a.svg\";","export default __webpack_public_path__ + \"static/media/done.0db08473.svg\";","export default __webpack_public_path__ + \"static/media/settings.e8bcb32b.svg\";","import { ChangeEventHandler, useCallback, useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { ICipher } from \"../../../ciphers/ICipher\";\r\nimport \"./CipherBox.css\";\r\nimport CipherSelect from \"./CipherSelect\";\r\nimport close from \"../../../icons/close.svg\";\r\nimport done from \"../../../icons/done.svg\";\r\nimport settings from \"../../../icons/settings.svg\";\r\n\r\ntype CipherSettingValue = Exclude<ICipher[\"settings\"], undefined>[string];\r\n\r\ntype Props = {\r\n  cipher: ICipher;\r\n  value: string;\r\n  onTypeChange: (newValue: string) => void;\r\n  onTextChange: (newValue: string) => void;\r\n  onSettingChange: (key: string, value: CipherSettingValue) => void;\r\n  onClose: () => void;\r\n  index: number;\r\n};\r\n\r\nconst getInput = (\r\n  key: string,\r\n  value: CipherSettingValue,\r\n  onChange: (key: string, newValue: CipherSettingValue) => void\r\n) => {\r\n  switch (typeof value) {\r\n    case \"number\":\r\n      return (\r\n        <input\r\n          type=\"number\"\r\n          value={value}\r\n          onChange={(event) => onChange(key, Number(event.target.value))}\r\n        />\r\n      );\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nexport const CipherBox = ({\r\n  cipher,\r\n  value,\r\n  onTextChange,\r\n  index,\r\n  onClose,\r\n  onTypeChange,\r\n  onSettingChange,\r\n}: Props) => {\r\n  const [isEditMode, setEditMode] = useState(false);\r\n\r\n  const handleChange: ChangeEventHandler<HTMLTextAreaElement> = useCallback(\r\n    (event) => onTextChange(event.target.value),\r\n    [onTextChange]\r\n  );\r\n\r\n  return (\r\n    <Draggable draggableId={cipher.id.toString()} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          className=\"cipherbox\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <div className=\"cipherbox-titlebar\">\r\n            <CipherSelect value={cipher.name} onChange={onTypeChange} />\r\n            <div className=\"cipherbox-handle\" />\r\n            {cipher.settings && (\r\n              <button\r\n                className=\"cipherbox-button\"\r\n                onClick={() => setEditMode(!isEditMode)}\r\n              >\r\n                {isEditMode ? (\r\n                  <img src={done} alt=\"Done\" />\r\n                ) : (\r\n                  <img src={settings} alt=\"Settings\" />\r\n                )}\r\n              </button>\r\n            )}\r\n            <button className=\"cipherbox-button\" onClick={onClose}>\r\n              <img src={close} alt=\"Close\"></img>\r\n            </button>\r\n          </div>\r\n          {isEditMode && cipher.settings ? (\r\n            <div className=\"cipherbox-settings\">\r\n              {Object.entries(cipher.settings).map(([key, value]) => {\r\n                return (\r\n                  <>\r\n                    <label>{key}</label>\r\n                    {getInput(key, value, onSettingChange)}\r\n                  </>\r\n                );\r\n              })}\r\n            </div>\r\n          ) : (\r\n            <textarea\r\n              className=\"cipherbox-content\"\r\n              value={value}\r\n              onChange={handleChange}\r\n            />\r\n          )}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n","import { useCallback, useState } from \"react\";\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\n\nimport \"./App.css\";\nimport { Cipher, cipherByName, CipherName } from \"./ciphers\";\nimport { Base64 } from \"./ciphers/Base64\";\nimport { Clear } from \"./ciphers/Clear\";\nimport { ICipher } from \"./ciphers/ICipher\";\nimport { Shift } from \"./ciphers/Shift\";\nimport { CipherBox } from \"./components/molecules/cipherbox\";\n\nconst initialCiphers = [new Clear(), new Shift(), new Base64()];\nconst initialValues = initialCiphers.map(() => \"\");\n\nconst moveCipher = (ciphers: Cipher[], from: number, to: number) => {\n  const result = [...ciphers];\n  const [removed] = result.splice(from, 1);\n  result.splice(to, 0, removed);\n\n  return result;\n};\n\nexport const App = () => {\n  const [ciphers, setCiphers] = useState<ICipher[]>(initialCiphers);\n  const [values, setValues] = useState<string[]>(initialValues);\n\n  const updateValues = useCallback(\n    (value: string, index: number) => {\n      const newValues = [...values];\n      newValues[index] = value;\n      for (let i = index; i > 0; i--) {\n        newValues[i - 1] = ciphers[i].decode(newValues[i]);\n      }\n      for (let i = index; i < ciphers.length - 1; i++) {\n        newValues[i + 1] = ciphers[i + 1].encode(newValues[i]);\n      }\n\n      setValues(newValues);\n    },\n    [ciphers, values]\n  );\n\n  function onDragEnd(result: DropResult) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const newCiphers = moveCipher(\n      ciphers,\n      result.source.index,\n      result.destination.index\n    );\n\n    setCiphers(newCiphers);\n  }\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>Apocrypta</h1>\n      </header>\n      <main className=\"cipherlist-container\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"cipherlist\" direction=\"horizontal\">\n            {(provided) => (\n              <div\n                className=\"cipherbox-container\"\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {ciphers.map((c, i) => (\n                  <CipherBox\n                    key={c.id}\n                    index={i}\n                    cipher={c}\n                    value={values[i]}\n                    onTypeChange={(value) => {\n                      const newCiphers = [...ciphers];\n                      const newCipher = cipherByName[value as CipherName]();\n                      newCiphers.splice(i, 1, newCipher);\n                      setCiphers(newCiphers);\n                    }}\n                    onTextChange={(value) => updateValues(value, i)}\n                    onSettingChange={(key, value) => {\n                      const newCiphers = [...ciphers];\n                      const cipher = newCiphers[i];\n                      if (cipher.settings) cipher.settings[key] = value;\n                      newCiphers.splice(i, 1, cipher);\n                      setCiphers(newCiphers);\n                    }}\n                    onClose={() => {\n                      const newCiphers = [...ciphers];\n                      newCiphers.splice(i, 1);\n                      setCiphers(newCiphers);\n                    }}\n                  />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <button onClick={() => setCiphers([...ciphers, new Clear()])}>+</button>\n      </main>\n      <footer>footer</footer>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}