{"version":3,"sources":["utils/idGenerator.ts","ciphers/types/AbstractCipher.ts","ciphers/cipherlib/Base64.ts","utils/cipherutils.ts","ciphers/cipherlib/Clear.ts","ciphers/utils/alphabet.ts","ciphers/utils/rotation.ts","ciphers/cipherlib/Shift.ts","ciphers/cipherlib/Vigenere.ts","ciphers/index.ts","state/calculations/calculationsSlice.ts","icons/close.svg","icons/settings.svg","components/atoms/button/ImageButton.tsx","components/atoms/cipherdirection/CipherDirection.tsx","components/atoms/modal/Modal.tsx","components/atoms/select/Select.tsx","components/atoms/numberinput/NumberInput.tsx","components/molecules/valuebox/EditView.tsx","components/molecules/cipherarrow/CipherArrow.tsx","components/molecules/valuebox/Valuebox.tsx","components/molecules/cipherchain/CipherChain.tsx","components/molecules/footer/Footer.tsx","components/molecules/header/Header.tsx","state/calculations/calculationsSelectors.ts","app/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","state/store.ts","state/calculations/calculationsMiddleware.ts","providers/StoreProvider.tsx","index.tsx"],"names":["idGenerator","startId","id","generator","AbstractCipher","name","direction","this","next","value","Base64","text","Buffer","from","toString","isConfigurable","object","Clear","alphabet","Object","freeze","alphabetUppercase","map","l","toUpperCase","createRotation","a","b","c","d","e","f","g","h","i","j","k","m","n","o","p","q","r","s","t","u","v","w","x","y","z","alphabets","letter","find","includes","size","modularValue","indexOf","length","createRotations","values","Shift","settings","shift","split","join","Vigenere","rotationValues","letterIndex","undefined","rotations","cipherMap","cipherNames","keys","createCipher","serializeCipher","cipher","deserializeCipher","result","initialState","rootValue","calculations","ciphers","calculationsSlice","createSlice","reducers","addCalculation","state","action","push","payload","removeCalculation","splice","index","moveCalculation","fromIndex","movingCalculation","toIndex","addCipher","calculationIndex","removeCipher","cipherIndex","moveCipher","movingCipher","setCipherName","setCipherDirection","setCipherSettings","recalculate","forEach","calculation","reduce","res","encode","decode","setRootValue","actions","ImageButton","icon","title","onClick","className","src","alt","CipherDirection","onChange","Modal","onClose","children","stopPropagation","Select","handleChange","useCallback","event","target","NumberInput","labelled","onChangeWrapper","Number","type","getInputByKeyAndValue","key","newValue","EditView","onSettingChange","entries","CipherArrow","onNameChange","onDirectionChange","useState","isEditMode","setEditMode","singleSetting","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","close","newName","createPortal","document","getElementById","Valuebox","onValueChange","CipherChain","dispatch","useDispatch","onDragEnd","destination","source","droppableId","droppableProps","newDirection","placeholder","Footer","realTitle","randomLetter","min","max","Math","floor","random","Header","Array","fill","setTitle","solvedIdx","setSolvedIdx","useEffect","handle","setInterval","newTitle","clearInterval","selectCalculations","selectRootValue","createSelector","selectCalculationSteps","App","useSelector","calculationSteps","step","stepIndex","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","calculationsReducer","customMiddleware","storeApi","store","configureStore","reducer","middleware","getDefaultMiddleware","StoreProvider","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4831f095.chunk.js","sourcesContent":["function* idGenerator(startId: number) {\r\n  let id = startId\r\n  while (true) yield id++\r\n}\r\n\r\n// generator will never reach return\r\n// therefore, return type number is okay to use here\r\nconst generator = idGenerator(0) as unknown as Generator<number, number>\r\n\r\nexport const generateId = () => generator.next().value\r\n","import { generateId } from \"../../utils/idGenerator\"\r\nimport { CipherDirection } from \"./CipherDirection\"\r\nimport { ICipher } from \"./ICipher\"\r\n/**\r\n * Blueprint for ciphers.\r\n * If you want to add a new cipher, extend this class.\r\n */\r\nexport abstract class AbstractCipher implements ICipher {\r\n  abstract readonly name: string\r\n  /**\r\n   * A cipher's {@link id} is important for distinguishing between multiple ciphers of the same kind\r\n   */\r\n  readonly id: number\r\n\r\n  /**\r\n   * By default ciphers encrypt from left to right and decrypt from right to left.\r\n   * This behaviour can be switched.\r\n   */\r\n  direction: CipherDirection = \"encode\"\r\n\r\n  /**\r\n   * Default constructor that takes care of generating the {@link id}\r\n   */\r\n  constructor(id?: number) {\r\n    this.id = id || generateId()\r\n  }\r\n\r\n  /**\r\n   * Takes any string and applies the cipher's encoding to it.\r\n   */\r\n  abstract encode(text: string): string\r\n\r\n  /**\r\n   * Takes any string and removes the cipher's encoding from it.\r\n   */\r\n  abstract decode(text: string): string\r\n}\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\r\n\r\nexport class Base64 extends AbstractCipher {\r\n  readonly name = \"Base64\"\r\n\r\n  encode(text: string): string {\r\n    return Buffer.from(text).toString(\"base64\")\r\n  }\r\n\r\n  decode(text: string): string {\r\n    return Buffer.from(text, \"base64\").toString()\r\n  }\r\n}\r\n","import { IConfigurable } from \"../ciphers/types/IConfigurable\"\r\n\r\nexport const isConfigurable = (object: unknown): object is IConfigurable =>\r\n  \"settings\" in (object as IConfigurable)\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\r\n\r\n/**\r\n * Not really a cipher.\r\n * Both {@link encode} and `{@link decode} both return the input string without modifying it.\r\n */\r\nexport class Clear extends AbstractCipher {\r\n  readonly name = \"Clear\"\r\n\r\n  encode(text: string): string {\r\n    return text\r\n  }\r\n\r\n  decode(text: string): string {\r\n    return text\r\n  }\r\n}\r\n","/**\r\n * List of all letters in the alphabet. Zero based.\r\n * @example const b = alphabet[1]\r\n */\r\nexport const alphabet = Object.freeze([\r\n  \"a\",\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"e\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"i\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"o\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"u\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n] as const)\r\n\r\nexport const alphabetUppercase = Object.freeze([\r\n  ...alphabet.map((l) => l.toUpperCase()),\r\n] as const)\r\n\r\n/**\r\n * Maps all letters to their index.\r\n * The reason this is done statically is because typescript can evaluate the types better this way.\r\n * @example const two = indexOfLetter(\"b\")\r\n */\r\nexport const indexOfLetter = Object.freeze({\r\n  a: 0,\r\n  b: 1,\r\n  c: 2,\r\n  d: 3,\r\n  e: 4,\r\n  f: 5,\r\n  g: 6,\r\n  h: 7,\r\n  i: 8,\r\n  j: 9,\r\n  k: 10,\r\n  l: 11,\r\n  m: 12,\r\n  n: 13,\r\n  o: 14,\r\n  p: 15,\r\n  q: 16,\r\n  r: 17,\r\n  s: 18,\r\n  t: 19,\r\n  u: 20,\r\n  v: 21,\r\n  w: 22,\r\n  x: 23,\r\n  y: 24,\r\n  z: 25,\r\n} as const)\r\n","/**\r\n * Easily get a circular index\r\n */\r\nexport const modularValue = (value: number, size: number) =>\r\n  (value + size) % size\r\n\r\n/**\r\n * Ceasar cipher like rotation that can handle multiple alphabets at once.\r\n * Useful for Upper/Lowercase etc.\r\n */\r\nexport const createRotation =\r\n  (value: number, alphabets: readonly (readonly string[])[]) =>\r\n  (letter: string) => {\r\n    const alphabet = alphabets.find((a) => a.includes(letter))\r\n\r\n    if (alphabet) {\r\n      return alphabet[\r\n        modularValue(alphabet.indexOf(letter) + value, alphabet.length)\r\n      ]\r\n    }\r\n\r\n    return letter\r\n  }\r\n\r\nexport const createRotations = (\r\n  values: number[],\r\n  alphabets: readonly (readonly string[])[]\r\n) => {\r\n  return values.map((value) => createRotation(value, alphabets))\r\n}\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\r\nimport { IConfigurable } from \"../types/IConfigurable\"\r\nimport { alphabet, alphabetUppercase } from \"../utils/alphabet\"\r\nimport { createRotation } from \"../utils/rotation\"\r\n\r\nconst alphabets = [alphabet, alphabetUppercase]\r\n\r\nexport class Shift extends AbstractCipher implements IConfigurable {\r\n  readonly name = \"Shift\"\r\n\r\n  settings = { value: 1 }\r\n\r\n  encode(text: string): string {\r\n    const shift = createRotation(this.settings.value, alphabets)\r\n    return text.split(\"\").map(shift).join(\"\")\r\n  }\r\n\r\n  decode(text: string): string {\r\n    const shift = createRotation(this.settings.value * -1, alphabets)\r\n    return text.split(\"\").map(shift).join(\"\")\r\n  }\r\n}\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\r\nimport { IConfigurable } from \"../types/IConfigurable\"\r\nimport { alphabet, alphabetUppercase } from \"../utils/alphabet\"\r\nimport { createRotations } from \"../utils/rotation\"\r\n\r\nconst alphabets = [alphabet, alphabetUppercase]\r\n\r\nexport class Vigenere extends AbstractCipher implements IConfigurable {\r\n  readonly name = \"Vignere\"\r\n  settings = {\r\n    value: \"abc\",\r\n  }\r\n\r\n  encode(text: string): string {\r\n    const rotationValues = this.settings.value.split(\"\").map((letter) => {\r\n      const letterIndex = alphabets\r\n        .find((a) => a.includes(letter))\r\n        ?.indexOf(letter)\r\n\r\n      return (letterIndex === undefined ? 0 : letterIndex) + 1\r\n    })\r\n\r\n    const rotations = createRotations(rotationValues, alphabets)\r\n\r\n    return text\r\n      .split(\"\")\r\n      .map((letter, i) => rotations[i % rotations.length](letter))\r\n      .join(\"\")\r\n  }\r\n  decode(text: string): string {\r\n    const rotationValues = this.settings.value.split(\"\").map((letter) => {\r\n      const letterIndex = alphabets\r\n        .find((a) => a.includes(letter))\r\n        ?.indexOf(letter)\r\n\r\n      return ((letterIndex === undefined ? 0 : letterIndex) + 1) * -1\r\n    })\r\n    const rotations = createRotations(rotationValues, alphabets)\r\n\r\n    return text\r\n      .split(\"\")\r\n      .map((letter, i) => rotations[i % rotations.length](letter))\r\n      .join(\"\")\r\n  }\r\n}\r\n","import { isConfigurable } from \"../utils/cipherutils\"\r\nimport { Base64 } from \"./cipherlib/Base64\"\r\nimport { Clear } from \"./cipherlib/Clear\"\r\nimport { Shift } from \"./cipherlib/Shift\"\r\nimport { Vigenere } from \"./cipherlib/Vigenere\"\r\nimport { SerializedCipher } from \"./types/SerializedCipher\"\r\n\r\n/**\r\n * Assigns simple names to all ciphers\r\n * If you add a cipher, also add it to this list.\r\n */\r\nconst cipherMap = {\r\n  [new Clear().name]: Clear,\r\n  [new Base64().name]: Base64,\r\n  [new Shift().name]: Shift,\r\n  [new Vigenere().name]: Vigenere,\r\n} as const\r\n\r\nexport type CipherName = keyof typeof cipherMap\r\nexport type CipherClass = typeof cipherMap[CipherName]\r\nexport type CipherInstance = InstanceType<CipherClass>\r\n\r\nexport const cipherNames = Object.freeze(Object.keys(cipherMap)) as CipherName[]\r\n\r\nexport const createCipher = (name: CipherName, id?: number) =>\r\n  new cipherMap[name](id)\r\n\r\nexport const serializeCipher = (cipher: CipherInstance): SerializedCipher => {\r\n  return {\r\n    name: cipher.name,\r\n    id: cipher.id,\r\n    direction: cipher.direction,\r\n    ...(isConfigurable(cipher) ? { settings: cipher.settings } : {}),\r\n  }\r\n}\r\nexport const deserializeCipher = (cipher: SerializedCipher): CipherInstance => {\r\n  const result = createCipher(cipher.name, cipher.id)\r\n\r\n  result.direction = cipher.direction\r\n  if (isConfigurable(result) && isConfigurable(cipher)) {\r\n    //@ts-expect-error\r\n    result.settings = cipher.settings\r\n  }\r\n\r\n  return result\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport {\r\n  CipherName,\r\n  createCipher,\r\n  deserializeCipher,\r\n  serializeCipher,\r\n} from \"../../ciphers\"\r\nimport { Base64 } from \"../../ciphers/cipherlib/Base64\"\r\nimport { Shift } from \"../../ciphers/cipherlib/Shift\"\r\nimport { CipherDirection } from \"../../ciphers/types/CipherDirection\"\r\nimport { SerializedCipher } from \"../../ciphers/types/SerializedCipher\"\r\nimport { Settings } from \"../../ciphers/types/Settings\"\r\nimport { isConfigurable } from \"../../utils/cipherutils\"\r\n\r\ntype Calculation = {\r\n  ciphers: SerializedCipher[]\r\n  result: string\r\n}\r\n\r\nexport interface CalculationsState {\r\n  rootValue: string\r\n  calculations: Calculation[]\r\n}\r\n\r\nconst decryptBase64 = new Base64()\r\ndecryptBase64.direction = \"decode\"\r\n\r\nconst decryptShift = new Shift()\r\ndecryptShift.direction = \"decode\"\r\n\r\nconst initialState: CalculationsState = {\r\n  rootValue: \"Experience is the teacher of all things.\",\r\n  calculations: [\r\n    {\r\n      ciphers: [serializeCipher(new Shift()), serializeCipher(new Base64())],\r\n      result: \"\",\r\n    },\r\n    // {\r\n    //   ciphers: [serializeCipher(decryptBase64), serializeCipher(decryptShift)],\r\n    //   result: \"\",\r\n    // },\r\n  ],\r\n}\r\n\r\nexport const calculationsSlice = createSlice({\r\n  name: \"calculations\",\r\n  initialState,\r\n  reducers: {\r\n    //#region Calculations\r\n    addCalculation: (\r\n      state,\r\n      action: PayloadAction<{ ciphers: SerializedCipher[] }>\r\n    ) => {\r\n      state.calculations.push({\r\n        ciphers: action.payload.ciphers,\r\n        result: \"\",\r\n      })\r\n    },\r\n    removeCalculation: (state, action: PayloadAction<{ index: number }>) => {\r\n      state.calculations.splice(action.payload.index, 1)\r\n    },\r\n    moveCalculation: (\r\n      state,\r\n      action: PayloadAction<{ fromIndex: number; toIndex: number }>\r\n    ) => {\r\n      const [movingCalculation] = state.calculations.splice(\r\n        action.payload.fromIndex,\r\n        1\r\n      )\r\n      state.calculations.splice(action.payload.toIndex, 0, movingCalculation)\r\n    },\r\n    //#endregion\r\n\r\n    //#region Ciphers\r\n    addCipher(\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        cipher: SerializedCipher\r\n      }>\r\n    ) {\r\n      state.calculations[action.payload.calculationIndex].ciphers.push(\r\n        action.payload.cipher\r\n      )\r\n    },\r\n    removeCipher(\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        cipherIndex: number\r\n      }>\r\n    ) {\r\n      state.calculations[action.payload.calculationIndex].ciphers.splice(\r\n        action.payload.cipherIndex,\r\n        1\r\n      )\r\n    },\r\n    moveCipher: (\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        fromIndex: number\r\n        toIndex: number\r\n      }>\r\n    ) => {\r\n      const [movingCipher] = state.calculations[\r\n        action.payload.calculationIndex\r\n      ].ciphers.splice(action.payload.fromIndex, 1)\r\n      state.calculations[action.payload.calculationIndex].ciphers.splice(\r\n        action.payload.toIndex,\r\n        0,\r\n        movingCipher\r\n      )\r\n    },\r\n    setCipherName(\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        cipherIndex: number\r\n        name: CipherName\r\n      }>\r\n    ) {\r\n      state.calculations[action.payload.calculationIndex].ciphers[\r\n        action.payload.cipherIndex\r\n      ] = serializeCipher(createCipher(action.payload.name))\r\n    },\r\n    setCipherDirection(\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        cipherIndex: number\r\n        direction: CipherDirection\r\n      }>\r\n    ) {\r\n      state.calculations[action.payload.calculationIndex].ciphers[\r\n        action.payload.cipherIndex\r\n      ].direction = action.payload.direction\r\n    },\r\n    setCipherSettings(\r\n      state,\r\n      action: PayloadAction<{\r\n        calculationIndex: number\r\n        cipherIndex: number\r\n        settings: Settings\r\n      }>\r\n    ) {\r\n      const cipher =\r\n        state.calculations[action.payload.calculationIndex].ciphers[\r\n          action.payload.cipherIndex\r\n        ]\r\n\r\n      if (isConfigurable(cipher)) {\r\n        cipher.settings = { ...cipher.settings, ...action.payload.settings }\r\n      }\r\n    },\r\n    //#endregion\r\n\r\n    //#region Results\r\n    recalculate(state) {\r\n      state.calculations.forEach((calculation, index) => {\r\n        calculation.result = calculation.ciphers.reduce(\r\n          (res, cipher) =>\r\n            cipher.direction === \"encode\"\r\n              ? deserializeCipher(cipher).encode(res)\r\n              : deserializeCipher(cipher).decode(res),\r\n          index === 0 ? state.rootValue : state.calculations[index - 1].result\r\n        )\r\n      })\r\n    },\r\n    setRootValue(state, action: PayloadAction<string>) {\r\n      state.rootValue = action.payload\r\n    },\r\n    //#endregion\r\n  },\r\n})\r\n\r\nexport const {\r\n  addCalculation,\r\n  removeCalculation,\r\n  moveCalculation,\r\n  recalculate,\r\n  setRootValue,\r\n  addCipher,\r\n  removeCipher,\r\n  moveCipher,\r\n  setCipherDirection,\r\n  setCipherSettings,\r\n  setCipherName,\r\n} = calculationsSlice.actions\r\n\r\nexport default calculationsSlice.reducer\r\n","export default __webpack_public_path__ + \"static/media/close.4200050a.svg\";","export default __webpack_public_path__ + \"static/media/settings.e8bcb32b.svg\";","import { MouseEventHandler } from \"react\"\r\nimport \"./ImageButton.css\"\r\n\r\ntype Props = { icon: string; title: string; onClick: MouseEventHandler }\r\n\r\nexport default function ImageButton({ icon, title, onClick }: Props) {\r\n  return (\r\n    <button className=\"btn-img\" onClick={onClick} title={title}>\r\n      <img src={icon} alt={title}></img>\r\n    </button>\r\n  )\r\n}\r\n","import { CipherDirection as Direction } from \"../../../ciphers/types/CipherDirection\"\r\nimport \"./CipherDirection.css\"\r\n\r\ntype Props = {\r\n  direction: Direction\r\n  onChange: (newDirection: Direction) => void\r\n}\r\n\r\nexport default function CipherDirection({ direction, onChange }: Props) {\r\n  return (\r\n    <button\r\n      className={`cipherdirection ${direction}`}\r\n      onClick={() => onChange(direction === \"decode\" ? \"encode\" : \"decode\")}\r\n    >\r\n      {direction === \"decode\" ? \"dec\" : \"enc\"}\r\n    </button>\r\n  )\r\n}\r\n","import { PropsWithChildren } from \"react\"\r\nimport \"./Modal.css\"\r\n\r\ninterface Props {\r\n  title: string\r\n  onClose: () => void\r\n}\r\n\r\nexport default function Modal({\r\n  title,\r\n  onClose,\r\n  children,\r\n}: PropsWithChildren<Props>) {\r\n  return (\r\n    <div className=\"modal-backdrop\" onClick={onClose}>\r\n      <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\r\n        <h2 className=\"modal-title\">{title}</h2>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { ChangeEventHandler, useCallback } from \"react\"\r\nimport \"./Select.css\"\r\n\r\ntype Props = {\r\n  value: string\r\n  values: string[]\r\n  onChange: (newValue: string) => void\r\n}\r\n\r\nexport default function Select({ value, values, onChange }: Props) {\r\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = useCallback(\r\n    (event) => onChange(event.target.value),\r\n    [onChange]\r\n  )\r\n\r\n  return (\r\n    <select className=\"select\" value={value} onChange={handleChange}>\r\n      {values.map((v) => (\r\n        <option key={v} value={v}>\r\n          {v}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n","import { ChangeEventHandler, useCallback } from \"react\"\r\nimport \"./NumberInput.css\"\r\n\r\ntype Props = {\r\n  title: string\r\n  value: number\r\n  onChange: (vnewValue: number) => void\r\n  labelled: boolean\r\n}\r\n\r\nexport default function NumberInput({\r\n  title,\r\n  value,\r\n  onChange,\r\n  labelled,\r\n}: Props) {\r\n  const onChangeWrapper: ChangeEventHandler<HTMLInputElement> = useCallback(\r\n    (event) => {\r\n      onChange(Number(event.target.value))\r\n    },\r\n    [onChange]\r\n  )\r\n\r\n  if (labelled)\r\n    return (\r\n      <div className=\"input input-number\">\r\n        <label className=\"input-title\">{title}</label>\r\n        <input\r\n          className=\"input-field\"\r\n          type=\"number\"\r\n          value={value}\r\n          onChange={onChangeWrapper}\r\n        />\r\n      </div>\r\n    )\r\n\r\n  return (\r\n    <input\r\n      className=\"input-field\"\r\n      type=\"number\"\r\n      value={value}\r\n      onChange={onChangeWrapper}\r\n    />\r\n  )\r\n}\r\n","import { IConfigurable } from \"../../../ciphers/types/IConfigurable\"\r\nimport NumberInput from \"../../atoms/numberinput/NumberInput\"\r\nimport \"./EditView.css\"\r\n\r\nexport type CipherSettingValue = Exclude<\r\n  IConfigurable[\"settings\"],\r\n  undefined\r\n>[string]\r\n\r\ntype Props = {\r\n  cipher: IConfigurable // settings must be defined\r\n  onSettingChange: (key: string, value: CipherSettingValue) => void\r\n}\r\n\r\nexport const getInputByKeyAndValue = (\r\n  key: string,\r\n  value: CipherSettingValue,\r\n  onChange: (key: string, newValue: CipherSettingValue) => void,\r\n  labelled: boolean = false\r\n) => {\r\n  switch (typeof value) {\r\n    case \"number\":\r\n      return (\r\n        <NumberInput\r\n          key={key}\r\n          title={key}\r\n          value={value}\r\n          onChange={(newValue) => onChange(key, newValue)}\r\n          labelled={labelled}\r\n        />\r\n      )\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport default function EditView({ cipher, onSettingChange }: Props) {\r\n  return (\r\n    <>\r\n      {Object.entries(cipher.settings).map(([key, value]) =>\r\n        getInputByKeyAndValue(key, value, onSettingChange)\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { useState } from \"react\"\r\nimport { Draggable } from \"react-beautiful-dnd\"\r\nimport { createPortal } from \"react-dom\"\r\nimport { CipherName, cipherNames } from \"../../../ciphers\"\r\nimport { CipherDirection as Direction } from \"../../../ciphers/types/CipherDirection\"\r\nimport { IConfigurable } from \"../../../ciphers/types/IConfigurable\"\r\nimport { SerializedCipher } from \"../../../ciphers/types/SerializedCipher\"\r\nimport close from \"../../../icons/close.svg\"\r\nimport settings from \"../../../icons/settings.svg\"\r\nimport { isConfigurable } from \"../../../utils/cipherutils\"\r\nimport ImageButton from \"../../atoms/button/ImageButton\"\r\nimport CipherDirection from \"../../atoms/cipherdirection/CipherDirection\"\r\nimport Modal from \"../../atoms/modal/Modal\"\r\nimport Select from \"../../atoms/select/Select\"\r\nimport EditView, {\r\n  CipherSettingValue,\r\n  getInputByKeyAndValue,\r\n} from \"../valuebox/EditView\"\r\nimport \"./CipherArrow.css\"\r\n\r\ntype Props = {\r\n  cipher: SerializedCipher\r\n  index: number\r\n  onNameChange: (newName: CipherName) => void\r\n  onDirectionChange: (newDirection: Direction) => void\r\n  onSettingChange: (key: string, value: CipherSettingValue) => void\r\n  onClose: () => void\r\n}\r\n\r\nexport default function CipherArrow({\r\n  cipher,\r\n  onNameChange,\r\n  onDirectionChange,\r\n  onSettingChange,\r\n  onClose,\r\n  index,\r\n}: Props) {\r\n  const [isEditMode, setEditMode] = useState(false)\r\n\r\n  const singleSetting =\r\n    isConfigurable(cipher) && Object.keys(cipher.settings).length === 1\r\n\r\n  return (\r\n    <Draggable draggableId={cipher.id.toString()} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          className=\"cipherarrow\"\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <div className=\"cipherarrow-iconlist\">\r\n            <ImageButton icon={close} onClick={onClose} title=\"Remove\" />\r\n            {isConfigurable(cipher) && !singleSetting && (\r\n              <ImageButton\r\n                icon={settings}\r\n                onClick={() => setEditMode(true)}\r\n                title=\"Settings\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"cipherarrow-wrapper\">\r\n            <div className=\"cipherarrow-display\">\r\n              <CipherDirection\r\n                direction={cipher.direction}\r\n                onChange={onDirectionChange}\r\n              />\r\n              <Select\r\n                value={cipher.name}\r\n                values={cipherNames}\r\n                onChange={(newName) => onNameChange(newName as CipherName)}\r\n              />\r\n              {isConfigurable(cipher) &&\r\n                singleSetting &&\r\n                getInputByKeyAndValue(\r\n                  ...Object.entries(cipher.settings)[0],\r\n                  onSettingChange\r\n                )}\r\n            </div>\r\n          </div>\r\n          {isEditMode &&\r\n            createPortal(\r\n              <Modal title=\"Settings\" onClose={() => setEditMode(false)}>\r\n                <EditView\r\n                  cipher={cipher as IConfigurable}\r\n                  onSettingChange={onSettingChange}\r\n                />\r\n              </Modal>,\r\n              document.getElementById(\"modal-root\") as HTMLElement\r\n            )}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}\r\n","import { ChangeEventHandler, useCallback } from \"react\"\r\nimport \"./Valuebox.css\"\r\n\r\ntype Props = {\r\n  value: string\r\n  onValueChange: (newValue: string) => void\r\n}\r\n\r\nexport const Valuebox = ({ value, onValueChange }: Props) => {\r\n  const handleChange: ChangeEventHandler<HTMLTextAreaElement> = useCallback(\r\n    (event) => onValueChange(event.target.value),\r\n    [onValueChange]\r\n  )\r\n\r\n  return (\r\n    <div className=\"cipherbox\">\r\n      <div className=\"cipherbox-titlebar\">\r\n        <div className=\"cipherbox-handle\" />\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"cipherbox-content\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import { useCallback } from \"react\"\r\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { serializeCipher } from \"../../../ciphers\"\r\nimport { Clear } from \"../../../ciphers/cipherlib/Clear\"\r\nimport {\r\n  addCipher,\r\n  CalculationsState,\r\n  moveCipher,\r\n  removeCipher,\r\n  setCipherDirection,\r\n  setCipherName,\r\n  setCipherSettings,\r\n} from \"../../../state/calculations/calculationsSlice\"\r\nimport CipherArrow from \"../cipherarrow/CipherArrow\"\r\nimport { Valuebox } from \"../valuebox/Valuebox\"\r\nimport \"./CipherChain.css\"\r\n\r\ntype Props = {\r\n  calculation: CalculationsState[\"calculations\"][number]\r\n  calculationIndex: number\r\n}\r\n\r\nexport default function CipherChain({ calculation, calculationIndex }: Props) {\r\n  const dispatch = useDispatch()\r\n\r\n  const onDragEnd = useCallback(\r\n    (result: DropResult) => {\r\n      if (\r\n        // Drop in invalid position\r\n        !result.destination ||\r\n        // Drop on the same spot\r\n        result.destination.index === result.source.index\r\n      ) {\r\n        return\r\n      }\r\n\r\n      dispatch(\r\n        moveCipher({\r\n          calculationIndex,\r\n          fromIndex: result.source.index,\r\n          toIndex: result.destination.index,\r\n        })\r\n      )\r\n    },\r\n    [calculationIndex, dispatch]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Droppable droppableId=\"cipherlist\" direction=\"horizontal\">\r\n          {(provided) => (\r\n            <div\r\n              className=\"cipherbox-container\"\r\n              ref={provided.innerRef}\r\n              {...provided.droppableProps}\r\n            >\r\n              {calculation.ciphers.map((c, i) => (\r\n                <CipherArrow\r\n                  index={i}\r\n                  key={c.id}\r\n                  cipher={c}\r\n                  onNameChange={(newName) =>\r\n                    dispatch(\r\n                      setCipherName({\r\n                        calculationIndex,\r\n                        cipherIndex: i,\r\n                        name: newName,\r\n                      })\r\n                    )\r\n                  }\r\n                  onSettingChange={(key, value) =>\r\n                    dispatch(\r\n                      setCipherSettings({\r\n                        calculationIndex,\r\n                        cipherIndex: i,\r\n                        settings: { [key]: value },\r\n                      })\r\n                    )\r\n                  }\r\n                  onClose={() =>\r\n                    dispatch(\r\n                      removeCipher({\r\n                        calculationIndex,\r\n                        cipherIndex: i,\r\n                      })\r\n                    )\r\n                  }\r\n                  onDirectionChange={(newDirection) =>\r\n                    dispatch(\r\n                      setCipherDirection({\r\n                        calculationIndex,\r\n                        cipherIndex: i,\r\n                        direction: newDirection,\r\n                      })\r\n                    )\r\n                  }\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n      <button\r\n        className=\"btn-addcipher\"\r\n        onClick={() =>\r\n          dispatch(\r\n            addCipher({\r\n              calculationIndex,\r\n              cipher: serializeCipher(new Clear()),\r\n            })\r\n          )\r\n        }\r\n      >\r\n        +\r\n      </button>\r\n      <Valuebox value={calculation.result} onValueChange={() => {}} />\r\n    </>\r\n  )\r\n}\r\n","import \"./Footer.css\"\r\n\r\nexport default function Footer() {\r\n  return <footer className=\"app-footer\">Made by me.</footer>\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { alphabet } from \"../../../ciphers/utils/alphabet\"\r\nimport \"./Header.css\"\r\n\r\nconst realTitle = \"Apocrypta\"\r\n\r\nconst randomInRange = (min: number, max: number) =>\r\n  Math.floor(Math.random() * (max - min) + min)\r\nconst randomLetter = () => alphabet[randomInRange(0, alphabet.length)] as string\r\n\r\nexport default function Header() {\r\n  const [title, setTitle] = useState(\r\n    new Array(realTitle.length).fill(\"\").map(randomLetter)\r\n  )\r\n  const [solvedIdx, setSolvedIdx] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const handle = setInterval(() => {\r\n      const newTitle = []\r\n      setSolvedIdx(solvedIdx + 0.1)\r\n      for (let i = 0; i < title.length; i++) {\r\n        if (i < solvedIdx) {\r\n          newTitle.push(realTitle[i])\r\n        } else {\r\n          newTitle.push(randomLetter())\r\n        }\r\n      }\r\n\r\n      setTitle(newTitle)\r\n\r\n      if (solvedIdx === title.length) {\r\n        clearInterval(handle)\r\n      }\r\n    }, 500 / (realTitle.length * 10))\r\n\r\n    return () => clearInterval(handle)\r\n  })\r\n\r\n  return (\r\n    <header className=\"app-header\">\r\n      <h1 className=\"app-title\">\r\n        {title.map((letter, index) => (\r\n          <span key={index} className=\"app-title-letter\">\r\n            {letter}\r\n          </span>\r\n        ))}\r\n      </h1>\r\n    </header>\r\n  )\r\n}\r\n","import { createSelector } from \"reselect\"\r\nimport { RootState } from \"../store\"\r\n\r\nexport const selectCalculations = (state: RootState) => state.calculations\r\nexport const selectRootValue = createSelector(\r\n  selectCalculations,\r\n  (calculations) => calculations.rootValue\r\n)\r\nexport const selectCalculationSteps = createSelector(\r\n  selectCalculations,\r\n  (calculations) => calculations.calculations\r\n)\r\n","import { useDispatch, useSelector } from \"react-redux\"\r\nimport { serializeCipher } from \"../ciphers\"\r\nimport { Clear } from \"../ciphers/cipherlib/Clear\"\r\nimport CipherChain from \"../components/molecules/cipherchain/CipherChain\"\r\nimport Footer from \"../components/molecules/footer/Footer\"\r\nimport Header from \"../components/molecules/header/Header\"\r\nimport { Valuebox } from \"../components/molecules/valuebox/Valuebox\"\r\nimport {\r\n  selectCalculationSteps,\r\n  selectRootValue,\r\n} from \"../state/calculations/calculationsSelectors\"\r\nimport {\r\n  addCalculation,\r\n  setRootValue,\r\n} from \"../state/calculations/calculationsSlice\"\r\nimport \"./App.css\"\r\n\r\nexport const App = () => {\r\n  const dispatch = useDispatch()\r\n  const rootValue = useSelector(selectRootValue)\r\n  const calculationSteps = useSelector(selectCalculationSteps)\r\n\r\n  return (\r\n    <div className=\"app dark\">\r\n      <Header />\r\n      <main className=\"cipherlist-container\">\r\n        <Valuebox\r\n          value={rootValue}\r\n          onValueChange={(newValue) => {\r\n            dispatch(setRootValue(newValue))\r\n          }}\r\n        />\r\n        {calculationSteps.map((step, stepIndex) => (\r\n          <CipherChain\r\n            key={stepIndex}\r\n            calculation={step}\r\n            calculationIndex={stepIndex}\r\n          />\r\n        ))}\r\n        <button\r\n          className=\"btn-addcalculation\"\r\n          onClick={() =>\r\n            dispatch(\r\n              addCalculation({ ciphers: [serializeCipher(new Clear())] })\r\n            )\r\n          }\r\n        >\r\n          +\r\n        </button>\r\n      </main>\r\n      <Footer />\r\n      <div id=\"modal-root\"></div>\r\n    </div>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\"\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\"\r\nimport { calculationsMiddleware } from \"./calculations/calculationsMiddleware\"\r\nimport calculationsReducer from \"./calculations/calculationsSlice\"\r\n\r\nconst rootReducer = combineReducers({\r\n  calculations: calculationsReducer,\r\n})\r\n\r\nconst customMiddleware = [calculationsMiddleware]\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => [\r\n    ...getDefaultMiddleware(),\r\n    ...customMiddleware,\r\n  ],\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { Middleware } from \"redux\"\r\n\r\nimport { RootState, store } from \"../store\"\r\nimport { recalculate } from \"./calculationsSlice\"\r\n\r\nexport const calculationsMiddleware: Middleware<{}, RootState> =\r\n  (storeApi) => (next) => (action) => {\r\n    next(action)\r\n\r\n    // recalculate all results\r\n    if (\r\n      [\r\n        \"calculations/moveCipher\",\r\n        \"calculations/setRootValue\",\r\n        \"calculations/moveCalculation\",\r\n        \"calculations/setCipherName\",\r\n        \"calculations/setCipherDirection\",\r\n        \"calculations/setCipherSettings\",\r\n      ].includes(action.type)\r\n    ) {\r\n      store.dispatch(recalculate())\r\n    }\r\n  }\r\n","import { PropsWithChildren } from \"react\"\r\nimport { Provider } from \"react-redux\"\r\nimport { store } from \"../state/store\"\r\n\r\nexport default function StoreProvider({ children }: PropsWithChildren<{}>) {\r\n  return <Provider store={store}>{children}</Provider>\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.css\"\r\nimport { App } from \"./app/App\"\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport StoreProvider from \"./providers/StoreProvider\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreProvider>\r\n      <App />\r\n    </StoreProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\nserviceWorkerRegistration.register()\r\nreportWebVitals()\r\n"],"sourceRoot":""}