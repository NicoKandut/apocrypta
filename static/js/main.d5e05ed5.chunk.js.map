{"version":3,"sources":["utils/idGenerator.ts","ciphers/types/AbstractCipher.ts","ciphers/cipherlib/Base64.ts","ciphers/cipherlib/Clear.ts","ciphers/utils/alphabet.ts","ciphers/cipherlib/Shift.ts","ciphers/index.ts","icons/close.svg","icons/done.svg","icons/settings.svg","utils/cipherutils.ts","components/atoms/button/ImageButton.tsx","components/molecules/cipherbox/CipherSelect.tsx","components/atoms/numberinput/NumberInput.tsx","components/molecules/cipherbox/EditView.tsx","components/molecules/cipherbox/Cipherbox.tsx","components/molecules/footer/Footer.tsx","components/molecules/header/Header.tsx","utils/cipherlistUtils.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["idGenerator","startId","id","generator","AbstractCipher","name","this","next","value","Base64","text","Buffer","from","toString","Clear","alphabet","Object","freeze","indexOfLetter","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","createShift","size","modularValue","length","Shift","settings","shift","split","map","join","cipherMap","cipherNames","keys","isConfigurable","object","ImageButton","icon","title","onClick","className","src","alt","CipherSelect","onChange","handleChange","useCallback","event","target","NumberInput","onChangeWrapper","Number","type","EditView","cipher","onSettingChange","entries","key","newValue","getInputByKeyAndValue","CipherBox","onTextChange","index","onClose","onTypeChange","useState","isEditMode","setEditMode","hasSettings","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","done","close","Footer","realTitle","randomLetter","min","max","Math","floor","random","Header","Array","fill","setTitle","solvedIdx","setSolvedIdx","useEffect","handle","setInterval","newTitle","push","clearInterval","letter","initialCiphers","initialValues","App","ciphers","setCiphers","values","setValues","updateValues","newValues","decode","encode","onDragEnd","result","destination","source","newCiphers","to","splice","removed","moveCipher","droppableId","direction","droppableProps","newCipher","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d5e05ed5.chunk.js","sourcesContent":["function* idGenerator(startId: number) {\n  let id = startId\n  while (true) yield id++\n}\n\n// generator will never reach return\n// therefore, return type number is okay to use here\nconst generator = idGenerator(0) as unknown as Generator<number, number>\n\nexport const generateId = () => generator.next().value\n","import { generateId } from \"../../utils/idGenerator\"\r\nimport { ICipher } from \"./ICipher\"\r\n\r\n/**\r\n * Blueprint for ciphers.\r\n * If you want to add a new cipher, extend this class.\r\n */\r\nexport abstract class AbstractCipher implements ICipher {\r\n  abstract readonly name: string\r\n  /**\r\n   * A cipher's {@link id} is important for distinguishing between multiple ciphers of the same kind\r\n   */\r\n  readonly id: number\r\n\r\n  /**\r\n   * Default constructor that takes care of generating the {@link id}\r\n   */\r\n  constructor() {\r\n    this.id = generateId()\r\n  }\r\n\r\n  /**\r\n   * Takes any string and applies the cipher's encoding to it.\r\n   */\r\n  abstract encode(text: string): string\r\n\r\n  /**\r\n   * Takes any string and removes the cipher's encoding from it.\r\n   */\r\n  abstract decode(text: string): string\r\n}\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\n\nexport class Base64 extends AbstractCipher {\n  readonly name = \"Base64\"\n\n  encode(text: string): string {\n    return Buffer.from(text).toString(\"base64\")\n  }\n\n  decode(text: string): string {\n    return Buffer.from(text, \"base64\").toString()\n  }\n}\n","import { AbstractCipher } from \"../types/AbstractCipher\"\n\n/**\n * Not really a cipher.\n * Both {@link encode} and `{@link decode} both return the input string without modifying it.\n */\nexport class Clear extends AbstractCipher {\n  readonly name = \"Clear\"\n\n  encode(text: string): string {\n    return text\n  }\n\n  decode(text: string): string {\n    return text\n  }\n}\n","/**\r\n * List of all letters in the alphabet. Zero based.\r\n * @example const b = alphabet[1]\r\n */\r\nexport const alphabet = Object.freeze([\r\n  \"a\",\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"e\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"i\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"o\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"u\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\",\r\n] as const)\r\n\r\n/**\r\n * Maps all letters to their index.\r\n * The reason this is done statically is because typescript can evaluate the types better this way.\r\n * @example const two = indexOfLetter(\"b\")\r\n */\r\nexport const indexOfLetter = Object.freeze({\r\n  a: 0,\r\n  b: 1,\r\n  c: 2,\r\n  d: 3,\r\n  e: 4,\r\n  f: 5,\r\n  g: 6,\r\n  h: 7,\r\n  i: 8,\r\n  j: 9,\r\n  k: 10,\r\n  l: 11,\r\n  m: 12,\r\n  n: 13,\r\n  o: 14,\r\n  p: 15,\r\n  q: 16,\r\n  r: 17,\r\n  s: 18,\r\n  t: 19,\r\n  u: 20,\r\n  v: 21,\r\n  w: 22,\r\n  x: 23,\r\n  y: 24,\r\n  z: 25,\r\n} as const)\r\n","import { AbstractCipher } from \"../types/AbstractCipher\"\nimport { IConfigurable } from \"../types/IConfigurable\"\nimport { alphabet, indexOfLetter } from \"../utils/alphabet\"\n\nconst modularValue = (value: number, size: number) => (value + size) % size\nconst createShift = (value: number) => (c: string) =>\n  c in indexOfLetter\n    ? alphabet[\n        modularValue(\n          indexOfLetter[c as typeof alphabet[number]] + value,\n          alphabet.length\n        )\n      ]\n    : c\n\nexport class Shift extends AbstractCipher implements IConfigurable {\n  readonly name = \"Shift\"\n\n  settings = { value: 1 }\n\n  encode(text: string): string {\n    const shift = createShift(this.settings.value)\n    return text.split(\"\").map(shift).join(\"\")\n  }\n\n  decode(text: string): string {\n    const shift = createShift(this.settings.value * -1)\n    return text.split(\"\").map(shift).join(\"\")\n  }\n}\n","import { Base64 } from \"./cipherlib/Base64\"\r\nimport { Clear } from \"./cipherlib/Clear\"\r\nimport { Shift } from \"./cipherlib/Shift\"\r\n\r\n/**\r\n * Assigns simple names to all ciphers\r\n * If you add a cipher, also add it to this list.\r\n */\r\nconst cipherMap = {\r\n  [new Clear().name]: Clear,\r\n  [new Base64().name]: Base64,\r\n  [new Shift().name]: Shift,\r\n} as const\r\n\r\nexport type CipherName = keyof typeof cipherMap\r\nexport type CipherClass = typeof cipherMap[CipherName]\r\nexport type CipherInstance = InstanceType<CipherClass>\r\n\r\nexport const cipherNames = Object.freeze(Object.keys(cipherMap)) as CipherName[]\r\nexport const createCipher = (name: CipherName) => new cipherMap[name]()\r\n","export default __webpack_public_path__ + \"static/media/close.4200050a.svg\";","export default __webpack_public_path__ + \"static/media/done.0db08473.svg\";","export default __webpack_public_path__ + \"static/media/settings.e8bcb32b.svg\";","import { IConfigurable } from \"../ciphers/types/IConfigurable\"\n\nexport const isConfigurable = (object: unknown): object is IConfigurable =>\n  \"settings\" in (object as IConfigurable)\n","import { MouseEventHandler } from \"react\"\nimport \"./ImageButton.css\"\n\ntype Props = { icon: string; title: string; onClick: MouseEventHandler }\n\nexport default function ImageButton({ icon, title, onClick }: Props) {\n  return (\n    <button className=\"btn-img\" onClick={onClick} title={title}>\n      <img src={icon} alt={title}></img>\n    </button>\n  )\n}\n","import { ChangeEventHandler, useCallback } from \"react\"\nimport { CipherName, cipherNames } from \"../../../ciphers\"\n\nimport \"./CipherSelect.css\"\n\ntype Props = {\n  value: string\n  onChange: (newValue: CipherName) => void\n}\n\nexport default function CipherSelect({ value, onChange }: Props) {\n  const handleChange: ChangeEventHandler<HTMLSelectElement> = useCallback(\n    (event) => onChange(event.target.value as CipherName),\n    [onChange]\n  )\n\n  return (\n    <select className=\"cipherbox-select\" value={value} onChange={handleChange}>\n      {cipherNames.map((c) => (\n        <option key={c} value={c}>\n          {c}\n        </option>\n      ))}\n    </select>\n  )\n}\n","import { ChangeEventHandler, useCallback } from \"react\"\nimport \"./NumberInput.css\"\n\ntype Props = {\n  title: string\n  value: number\n  onChange: (vnewValue: number) => void\n}\n\nexport default function NumberInput({ title, value, onChange }: Props) {\n  const onChangeWrapper: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (event) => {\n      onChange(Number(event.target.value))\n    },\n    [onChange]\n  )\n\n  return (\n    <div className=\"input input-number\">\n      <label className=\"input-title\">{title}</label>\n      <input\n        className=\"input-field\"\n        type=\"number\"\n        value={value}\n        onChange={onChangeWrapper}\n      />\n    </div>\n  )\n}\n","import { IConfigurable } from \"../../../ciphers/types/IConfigurable\"\nimport NumberInput from \"../../atoms/numberinput/NumberInput\"\nimport \"./EditView.css\"\n\nexport type CipherSettingValue = Exclude<\n  IConfigurable[\"settings\"],\n  undefined\n>[string]\n\ntype Props = {\n  cipher: IConfigurable // settings must be defined\n  onSettingChange: (key: string, value: CipherSettingValue) => void\n}\n\nconst getInputByKeyAndValue = (\n  key: string,\n  value: CipherSettingValue,\n  onChange: (key: string, newValue: CipherSettingValue) => void\n) => {\n  switch (typeof value) {\n    case \"number\":\n      return (\n        <NumberInput\n          title={key}\n          value={value}\n          onChange={(newValue) => onChange(key, newValue)}\n        />\n      )\n    default:\n      return null\n  }\n}\n\nexport default function EditView({ cipher, onSettingChange }: Props) {\n  return (\n    <div className=\"cipherbox-settings\">\n      {Object.entries(cipher.settings).map(([key, value]) =>\n        getInputByKeyAndValue(key, value, onSettingChange)\n      )}\n    </div>\n  )\n}\n","import { ChangeEventHandler, useCallback, useState } from \"react\"\nimport { Draggable } from \"react-beautiful-dnd\"\nimport { CipherInstance, CipherName } from \"../../../ciphers\"\nimport close from \"../../../icons/close.svg\"\nimport done from \"../../../icons/done.svg\"\nimport settings from \"../../../icons/settings.svg\"\nimport { isConfigurable } from \"../../../utils/cipherutils\"\nimport ImageButton from \"../../atoms/button/ImageButton\"\nimport \"./Cipherbox.css\"\nimport CipherSelect from \"./CipherSelect\"\nimport EditView, { CipherSettingValue } from \"./EditView\"\n\ntype Props = {\n  cipher: CipherInstance\n  value: string\n  onTypeChange: (newValue: CipherName) => void\n  onTextChange: (newValue: string) => void\n  onSettingChange: (key: string, value: CipherSettingValue) => void\n  onClose: () => void\n  index: number\n}\n\nexport const CipherBox = ({\n  cipher,\n  value,\n  onTextChange,\n  index,\n  onClose,\n  onTypeChange,\n  onSettingChange,\n}: Props) => {\n  const [isEditMode, setEditMode] = useState(false)\n\n  const handleChange: ChangeEventHandler<HTMLTextAreaElement> = useCallback(\n    (event) => onTextChange(event.target.value),\n    [onTextChange]\n  )\n\n  const hasSettings = isConfigurable(cipher)\n\n  return (\n    <Draggable draggableId={cipher.id.toString()} index={index}>\n      {(provided) => (\n        <div\n          className=\"cipherbox\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <div className=\"cipherbox-titlebar\">\n            <CipherSelect value={cipher.name} onChange={onTypeChange} />\n            <div className=\"cipherbox-handle\" />\n            {hasSettings &&\n              (isEditMode ? (\n                <ImageButton\n                  icon={done}\n                  onClick={() => setEditMode(false)}\n                  title=\"Done\"\n                />\n              ) : (\n                <ImageButton\n                  icon={settings}\n                  onClick={() => setEditMode(true)}\n                  title=\"Settings\"\n                />\n              ))}\n            <ImageButton\n              icon={close}\n              onClick={onClose}\n              title=\"Remove this cipher\"\n            />\n          </div>\n          {hasSettings && isEditMode ? (\n            <EditView cipher={cipher} onSettingChange={onSettingChange} />\n          ) : (\n            <textarea\n              className=\"cipherbox-content\"\n              value={value}\n              onChange={handleChange}\n            />\n          )}\n        </div>\n      )}\n    </Draggable>\n  )\n}\n","import \"./Footer.css\"\n\nexport default function Footer() {\n  return <footer className=\"app-footer\">Made by me.</footer>\n}\n","import { useEffect, useState } from \"react\"\nimport { alphabet } from \"../../../ciphers/utils/alphabet\"\nimport \"./Header.css\"\n\nconst realTitle = \"Apocrypta\"\n\nconst randomInRange = (min: number, max: number) =>\n  Math.floor(Math.random() * (max - min) + min)\nconst randomLetter = () => alphabet[randomInRange(0, alphabet.length)] as string\n\nexport default function Header() {\n  const [title, setTitle] = useState(\n    new Array(realTitle.length).fill(\"\").map(randomLetter)\n  )\n  const [solvedIdx, setSolvedIdx] = useState(0)\n\n  useEffect(() => {\n    const handle = setInterval(() => {\n      const newTitle = []\n      setSolvedIdx(solvedIdx + 0.1)\n      for (let i = 0; i < title.length; i++) {\n        if (i < solvedIdx) {\n          newTitle.push(realTitle[i])\n        } else {\n          newTitle.push(randomLetter())\n        }\n      }\n\n      setTitle(newTitle)\n\n      if (solvedIdx === title.length) {\n        clearInterval(handle)\n      }\n    }, 500 / (realTitle.length * 10))\n\n    return () => clearInterval(handle)\n  })\n\n  return (\n    <header className=\"app-header\">\n      <h1 className=\"app-title\">\n        {title.map((letter, index) => (\n          <span key={index} className=\"app-title-letter\">\n            {letter}\n          </span>\n        ))}\n      </h1>\n    </header>\n  )\n}\n","import { CipherInstance } from \"../ciphers\"\n\n/**\n * Moves a cipher in a list of ciphers\n * @param ciphers list of ciphers\n * @param from 0 based index\n * @param to 0 based index\n * @returns a new list\n */\nexport const moveCipher = (\n  ciphers: CipherInstance[],\n  from: number,\n  to: number\n) => {\n  const result = [...ciphers]\n  const [removed] = result.splice(from, 1)\n  result.splice(to, 0, removed)\n\n  return result\n}\n","import { useCallback, useEffect, useState } from \"react\"\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\"\n\nimport \"./App.css\"\nimport { CipherInstance, createCipher } from \"./ciphers\"\nimport { Clear } from \"./ciphers/cipherlib/Clear\"\nimport { Shift } from \"./ciphers/cipherlib/Shift\"\nimport { CipherBox } from \"./components/molecules/cipherbox/Cipherbox\"\nimport Footer from \"./components/molecules/footer/Footer\"\nimport Header from \"./components/molecules/header/Header\"\nimport { moveCipher } from \"./utils/cipherlistUtils\"\nimport { isConfigurable } from \"./utils/cipherutils\"\n\n// Initial app setup\nconst initialCiphers = [new Clear(), new Shift()] as const\nconst initialValues = initialCiphers.map(() => \"\")\ninitialCiphers[1].settings.value = 3\n\nexport const App = () => {\n  const [ciphers, setCiphers] = useState<CipherInstance[]>([...initialCiphers])\n  const [values, setValues] = useState<string[]>(initialValues)\n\n  const updateValues = useCallback(\n    (value: string, index: number) => {\n      const newValues = [...values]\n      newValues[index] = value\n      for (let i = index; i > 0; i--) {\n        newValues[i - 1] = ciphers[i].decode(newValues[i])\n      }\n      for (let i = index; i < ciphers.length - 1; i++) {\n        newValues[i + 1] = ciphers[i + 1].encode(newValues[i])\n      }\n\n      setValues(newValues)\n    },\n    [ciphers, values]\n  )\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      if (!result.destination) {\n        return\n      }\n\n      if (result.destination.index === result.source.index) {\n        return\n      }\n\n      const newCiphers = moveCipher(\n        ciphers,\n        result.source.index,\n        result.destination.index\n      )\n\n      setCiphers(newCiphers)\n    },\n    [ciphers]\n  )\n\n  useEffect(() => {\n    updateValues(\"Experience is the teacher of all things.\", 0)\n  }, [])\n\n  return (\n    <div className=\"app dark\">\n      <Header />\n      <main className=\"cipherlist-container\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"cipherlist\" direction=\"horizontal\">\n            {(provided) => (\n              <div\n                className=\"cipherbox-container\"\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n              >\n                {ciphers.map((c, i) => (\n                  <CipherBox\n                    key={c.id}\n                    index={i}\n                    cipher={c}\n                    value={values[i]}\n                    onTypeChange={(value) => {\n                      const newCiphers = [...ciphers]\n                      const newCipher = createCipher(value)\n                      newCiphers.splice(i, 1, newCipher)\n                      setCiphers(newCiphers)\n                    }}\n                    onTextChange={(value) => updateValues(value, i)}\n                    onSettingChange={(key, value) => {\n                      const newCiphers = [...ciphers]\n                      const cipher = newCiphers[i]\n                      if (isConfigurable(cipher)) {\n                        //@ts-expect-error This can never be invalid but i gotta find a good way to express this in code\n                        cipher.settings[key] = value\n                      }\n                      newCiphers.splice(i, 1, cipher)\n                      setCiphers(newCiphers)\n                    }}\n                    onClose={() => {\n                      const newCiphers = [...ciphers]\n                      newCiphers.splice(i, 1)\n                      setCiphers(newCiphers)\n                    }}\n                  />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <button\n          className=\"btn-add\"\n          onClick={() => setCiphers([...ciphers, new Clear()])}\n        >\n          +\n        </button>\n      </main>\n      <Footer />\n    </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport { App } from \"./App\"\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\nserviceWorkerRegistration.register()\nreportWebVitals()\n"],"sourceRoot":""}